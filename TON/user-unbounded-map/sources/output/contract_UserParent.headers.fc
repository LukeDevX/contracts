;;
;; Header files for UserParent
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_slice
(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline;

;; __tact_dict_get_slice_slice
slice __tact_dict_get_slice_slice(cell d, int kl, slice k) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $UserParent$_store
builder $UserParent$_store(builder build_0, (slice, int, cell) v) inline;

;; $UserParent$_load
(slice, ((slice, int, cell))) $UserParent$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $UserParent$init$_load
(slice, ((slice))) $UserParent$init$_load(slice sc_0) inline;

;; $UserChild$init$_store
builder $UserChild$init$_store(builder build_0, (slice, slice) v) inline;

;; $UserParent$_contract_init
(slice, int, cell) $UserParent$_contract_init(slice $owner) impure inline_ref;

;; $UserParent$_contract_load
(slice, int, cell) $UserParent$_contract_load() impure inline_ref;

;; $UserParent$_contract_store
() $UserParent$_contract_store((slice, int, cell) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $UserParent$_fun_getCount
((slice, int, cell), int) $UserParent$_fun_getCount((slice, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $UserParent$_fun_forward
((slice, int, cell), ()) $UserParent$_fun_forward((slice, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $UserParent$_fun_notify
((slice, int, cell), ()) $UserParent$_fun_notify((slice, int, cell) $self, cell $body) impure inline;

;; $UserParent$_fun_owner
((slice, int, cell), slice) $UserParent$_fun_owner((slice, int, cell) $self) impure inline_ref;

;; $UserChild$_init_child
(cell, cell) $UserChild$_init_child(cell sys', slice $parent, slice $userAddress) inline_ref;

;; $SendParameters$_constructor_to_body_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice $to, cell $body, int $value, int $mode) inline;

;; $SendParameters$_constructor_to_value_mode_bounce
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce(slice $to, int $value, int $mode, int $bounce) inline;

;; $SendParameters$_constructor_to_body_value_mode_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode_code_data(slice $to, cell $body, int $value, int $mode, cell $code, cell $data) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
