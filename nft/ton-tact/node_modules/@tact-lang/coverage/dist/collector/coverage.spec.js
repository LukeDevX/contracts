"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const core_1 = require("@ton/core");
const coverage_1 = require("./coverage");
const parseVMLogs_1 = require("./parseVMLogs");
const printCoverage_1 = require("./printCoverage");
describe('coverage', () => {
    it('should parse logs', () => {
        let logs = fs.readFileSync(path.resolve(__dirname, '__testdata__', 'log1.txt'), 'utf8');
        (0, parseVMLogs_1.parseVMLogs)(logs);
    });
    it('should parse logs with empty lines', () => {
        let logs = fs.readFileSync(path.resolve(__dirname, '__testdata__', 'log2.txt'), 'utf8');
        (0, parseVMLogs_1.parseVMLogs)(logs);
    });
    // it('should collect coverage', () => {
    //     // Collect coverage
    //     let rawLogs = fs.readFileSync(path.resolve(__dirname, '__testdata__', 'log1.txt'), 'utf8');
    //     let logs = parseVMLogs(rawLogs);
    //     let collector = new CoverageCollector();
    //     collectCoverage({
    //         collector,
    //         logs,
    //         gasLimit: 1000000000n
    //     });
    //     expect(collector.export()).toMatchSnapshot();
    //     // Print coverage
    //     let rawCode = Cell.fromBoc(fs.readFileSync(path.resolve(__dirname, '__testdata__', 'log1.boc')))[0];
    //     let res = printCoverage(rawCode, collector);
    //     fs.writeFileSync(path.resolve(__dirname, '__testdata__', 'log1.html'), res);
    // });
    it('should collect coverage 2', () => {
        // Collect coverage
        let rawLogs = fs.readFileSync(path.resolve(__dirname, '__testdata__', 'log2.txt'), 'utf8');
        let logs = (0, parseVMLogs_1.parseVMLogs)(rawLogs);
        let collector = new coverage_1.CoverageCollector();
        (0, coverage_1.collectCoverage)({
            collector,
            logs
        });
        expect(collector.export()).toMatchSnapshot();
        // Print coverage
        let rawCode = core_1.Cell.fromBase64('te6ccgEBCAEAlwABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQC48oMI1xgg0x/TH9MfAvgju/Jj7UTQ0x/TH9P/0VEyuvKhUUS68qIE+QFUEFX5EPKj9ATR+AB/jhYhgBD0eG+lIJgC0wfUMAH7AJEy4gGz5lsBpMjLH8sfy//J7VQABNAwAgFIBgcAF7s5ztRNDTPzHXC/+AARuMl+1E0NcLH4');
        let res = (0, printCoverage_1.printCoverage)(rawCode, collector);
        fs.writeFileSync(path.resolve(__dirname, '__testdata__', 'log2.html'), res);
    });
});
