"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.completeCoverage = exports.exportCoverageRawLogs = exports.exportCoverageLogs = exports.beginCoverage = void 0;
const glob_1 = __importDefault(require("glob"));
const coverage_1 = require("../collector/coverage");
const parseVMLogs_1 = require("../collector/parseVMLogs");
const fs = __importStar(require("fs"));
const core_1 = require("@ton/core");
const printCoverage_1 = require("../collector/printCoverage");
function beginCoverage() {
    // Check if coverage already started
    let ex = globalThis.__ton_coverage__;
    if (ex) {
        throw new Error('Coverage already started');
    }
    // Start coverage
    globalThis.__ton_coverage_storage__ = [];
    globalThis.__ton_coverage__ = (src) => globalThis.__ton_coverage_storage__.push(src);
}
exports.beginCoverage = beginCoverage;
function exportCoverageLogs() {
    let logs = globalThis.__ton_coverage_storage__;
    return logs.map((v) => (0, parseVMLogs_1.parseVMLogs)(v));
}
exports.exportCoverageLogs = exportCoverageLogs;
function exportCoverageRawLogs() {
    let logs = globalThis.__ton_coverage_storage__;
    return [...logs];
}
exports.exportCoverageRawLogs = exportCoverageRawLogs;
function completeCoverage(paths) {
    let logs = exportCoverageLogs();
    // Collect coverage
    let collector = new coverage_1.CoverageCollector();
    for (let l of logs) {
        try {
            (0, coverage_1.collectCoverage)({ logs: l, collector });
        }
        catch (e) {
            console.warn(e);
        }
    }
    // Render coverage
    let files = glob_1.default.sync(paths);
    for (let f of files) {
        if (f.endsWith('.boc')) {
            try {
                let code = core_1.Cell.fromBoc(fs.readFileSync(f))[0];
                let coverage = (0, printCoverage_1.printCoverage)(code, collector);
                fs.writeFileSync(f + '.html', coverage);
            }
            catch (e) {
                console.warn(e);
            }
        }
    }
}
exports.completeCoverage = completeCoverage;
